{"ast":null,"code":"var _jsxFileName = \"/Users/mik04rm/kody/flappy/src/components/Grid.tsx\";\nimport React from 'react';\nimport { CELL_SIZE, range, Vec2 } from '../utility';\nimport Cell from './Cell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Grid = props => {\n  console.log('Grid render');\n  const posRow = props.position.row;\n  const posCol = props.position.col;\n\n  if (posRow < 0 || posRow > 9) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Game Over\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 16\n    }, this);\n  }\n\n  const table = [];\n\n  for (let i = 0; i < 10; i++) {\n    table.push(new Array(10).fill('black'));\n  }\n\n  props.obstacles.forEach(function (obstacle) {\n    if (obstacle.col >= 0 && obstacle.col <= 9) {\n      if (obstacle.side === 'top') {\n        for (let i = 0; i < obstacle.height; i++) {\n          table[i][obstacle.col] = 'green';\n        }\n      } else {\n        //bottom\n        for (let i = 9; i > 9 - obstacle.height; i--) {\n          table[i][obstacle.col] = 'green';\n        }\n      }\n    }\n  });\n\n  if (table[posRow][posCol] == 'green') {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Game Over\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 16\n    }, this);\n  }\n\n  table[posRow][posCol] = 'lime';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      width: CELL_SIZE * 10 + 'px'\n    },\n    children: range(0, 10).map(row => range(0, 10).map(col => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Cell, {\n          color: table[row][col],\n          position: new Vec2(row, col)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 25\n      }, this);\n    }))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Grid;\nexport default Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/Users/mik04rm/kody/flappy/src/components/Grid.tsx"],"names":["React","CELL_SIZE","range","Vec2","Cell","Grid","props","console","log","posRow","position","row","posCol","col","table","i","push","Array","fill","obstacles","forEach","obstacle","side","height","display","flexWrap","width","map"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,SAAR,EAAmBC,KAAnB,EAA0BC,IAA1B,QAA+C,YAA/C;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAIA,MAAMC,IAAyB,GAAIC,KAAD,IAAW;AACzCC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,QAAMC,MAAM,GAAGH,KAAK,CAACI,QAAN,CAAeC,GAA9B;AACA,QAAMC,MAAM,GAAGN,KAAK,CAACI,QAAN,CAAeG,GAA9B;;AACA,MAAIJ,MAAM,GAAG,CAAT,IAAcA,MAAM,GAAG,CAA3B,EAA8B;AAC1B,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AACD,QAAMK,KAAiB,GAAG,EAA1B;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBD,IAAAA,KAAK,CAACE,IAAN,CAAW,IAAIC,KAAJ,CAAU,EAAV,EAAcC,IAAd,CAAmB,OAAnB,CAAX;AACH;;AACDZ,EAAAA,KAAK,CAACa,SAAN,CAAgBC,OAAhB,CAAwB,UAAUC,QAAV,EAAoB;AACxC,QAAIA,QAAQ,CAACR,GAAT,IAAgB,CAAhB,IAAqBQ,QAAQ,CAACR,GAAT,IAAgB,CAAzC,EAA4C;AACxC,UAAIQ,QAAQ,CAACC,IAAT,KAAkB,KAAtB,EAA6B;AACzB,aAAK,IAAIP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGM,QAAQ,CAACE,MAA7B,EAAqCR,CAAC,EAAtC,EAA0C;AACtCD,UAAAA,KAAK,CAACC,CAAD,CAAL,CAASM,QAAQ,CAACR,GAAlB,IAAyB,OAAzB;AACH;AACJ,OAJD,MAIO;AACH;AACA,aAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,IAAIM,QAAQ,CAACE,MAAjC,EAAyCR,CAAC,EAA1C,EAA8C;AAC1CD,UAAAA,KAAK,CAACC,CAAD,CAAL,CAASM,QAAQ,CAACR,GAAlB,IAAyB,OAAzB;AACH;AACJ;AACJ;AACJ,GAbD;;AAeA,MAAIC,KAAK,CAACL,MAAD,CAAL,CAAcG,MAAd,KAAyB,OAA7B,EAAsC;AAClC,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AACDE,EAAAA,KAAK,CAACL,MAAD,CAAL,CAAcG,MAAd,IAAwB,MAAxB;AACA,sBACI;AACI,IAAA,KAAK,EAAE;AACHY,MAAAA,OAAO,EAAE,MADN;AAEHC,MAAAA,QAAQ,EAAE,MAFP;AAGHC,MAAAA,KAAK,EAAEzB,SAAS,GAAG,EAAZ,GAAiB;AAHrB,KADX;AAAA,cAMKC,KAAK,CAAC,CAAD,EAAI,EAAJ,CAAL,CAAayB,GAAb,CAAkBhB,GAAD,IACdT,KAAK,CAAC,CAAD,EAAI,EAAJ,CAAL,CAAayB,GAAb,CAAkBd,GAAD,IAAS;AACtB,0BACI;AAAA,+BACI,QAAC,IAAD;AACI,UAAA,KAAK,EAAEC,KAAK,CAACH,GAAD,CAAL,CAAWE,GAAX,CADX;AAEI,UAAA,QAAQ,EAAE,IAAIV,IAAJ,CAASQ,GAAT,EAAcE,GAAd;AAFd;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ;AAQH,KATD,CADH;AANL;AAAA;AAAA;AAAA;AAAA,UADJ;AAqBH,CAnDD;;KAAMR,I;AAqDN,eAAeA,IAAf","sourcesContent":["import React from 'react';\nimport {CELL_SIZE, range, Vec2, Obstacle} from '../utility';\nimport Cell from './Cell';\n\ntype GridProps = {position: Vec2; obstacles: Obstacle[]};\n\nconst Grid: React.FC<GridProps> = (props) => {\n    console.log('Grid render');\n    const posRow = props.position.row;\n    const posCol = props.position.col;\n    if (posRow < 0 || posRow > 9) {\n        return <h1>Game Over</h1>;\n    }\n    const table: string[][] = [];\n    for (let i = 0; i < 10; i++) {\n        table.push(new Array(10).fill('black'));\n    }\n    props.obstacles.forEach(function (obstacle) {\n        if (obstacle.col >= 0 && obstacle.col <= 9) {\n            if (obstacle.side === 'top') {\n                for (let i = 0; i < obstacle.height; i++) {\n                    table[i][obstacle.col] = 'green';\n                }\n            } else {\n                //bottom\n                for (let i = 9; i > 9 - obstacle.height; i--) {\n                    table[i][obstacle.col] = 'green';\n                }\n            }\n        }\n    });\n\n    if (table[posRow][posCol] == 'green') {\n        return <h1>Game Over</h1>;\n    }\n    table[posRow][posCol] = 'lime';\n    return (\n        <div\n            style={{\n                display: 'flex',\n                flexWrap: 'wrap',\n                width: CELL_SIZE * 10 + 'px'\n            }}>\n            {range(0, 10).map((row) =>\n                range(0, 10).map((col) => {\n                    return (\n                        <div>\n                            <Cell\n                                color={table[row][col]}\n                                position={new Vec2(row, col)}\n                            />\n                        </div>\n                    );\n                })\n            )}\n        </div>\n    );\n};\n\nexport default Grid;\n"]},"metadata":{},"sourceType":"module"}