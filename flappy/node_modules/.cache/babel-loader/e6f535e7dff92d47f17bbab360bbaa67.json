{"ast":null,"code":"var _jsxFileName = \"/Users/mik04rm/Desktop/kody/flappy/src/components/Grid.tsx\";\nimport React from 'react';\nimport { CELL_SIZE, range, Vec2 } from '../utility';\nimport Cell from './Cell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Grid = props => {\n  const table = [];\n\n  for (let i = 0; i < 10; i++) {\n    table.push(new Array(10).fill('black'));\n  }\n\n  props.obstacles.forEach(function (element) {\n    if (element.side === 'top') {\n      for (let i = 0; i < element.height; i++) {\n        table[i][element.col] = 'green';\n      }\n    } else {//bottom\n    }\n  });\n  table[props.position.row][props.position.col] = 'lime';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      width: CELL_SIZE * 10 + 'px'\n    },\n    children: range(0, 10).map(row => range(0, 10).map(col => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Cell, {\n          color: table[row][col],\n          position: new Vec2(row, col)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 25\n      }, this);\n    }))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Grid;\nexport default Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/Users/mik04rm/Desktop/kody/flappy/src/components/Grid.tsx"],"names":["React","CELL_SIZE","range","Vec2","Cell","Grid","props","table","i","push","Array","fill","obstacles","forEach","element","side","height","col","position","row","display","flexWrap","width","map"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,SAAR,EAAmBC,KAAnB,EAA0BC,IAA1B,QAA+C,YAA/C;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAIA,MAAMC,IAAyB,GAAIC,KAAD,IAAW;AACzC,QAAMC,KAAiB,GAAG,EAA1B;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBD,IAAAA,KAAK,CAACE,IAAN,CAAW,IAAIC,KAAJ,CAAU,EAAV,EAAcC,IAAd,CAAmB,OAAnB,CAAX;AACH;;AACDL,EAAAA,KAAK,CAACM,SAAN,CAAgBC,OAAhB,CAAwB,UAAUC,OAAV,EAAmB;AACvC,QAAIA,OAAO,CAACC,IAAR,KAAiB,KAArB,EAA4B;AACxB,WAAK,IAAIP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGM,OAAO,CAACE,MAA5B,EAAoCR,CAAC,EAArC,EAAyC;AACrCD,QAAAA,KAAK,CAACC,CAAD,CAAL,CAASM,OAAO,CAACG,GAAjB,IAAwB,OAAxB;AACH;AACJ,KAJD,MAIO,CACH;AACH;AACJ,GARD;AASAV,EAAAA,KAAK,CAACD,KAAK,CAACY,QAAN,CAAeC,GAAhB,CAAL,CAA0Bb,KAAK,CAACY,QAAN,CAAeD,GAAzC,IAAgD,MAAhD;AACA,sBACI;AACI,IAAA,KAAK,EAAE;AACHG,MAAAA,OAAO,EAAE,MADN;AAEHC,MAAAA,QAAQ,EAAE,MAFP;AAGHC,MAAAA,KAAK,EAAErB,SAAS,GAAG,EAAZ,GAAiB;AAHrB,KADX;AAAA,cAMKC,KAAK,CAAC,CAAD,EAAI,EAAJ,CAAL,CAAaqB,GAAb,CAAkBJ,GAAD,IACdjB,KAAK,CAAC,CAAD,EAAI,EAAJ,CAAL,CAAaqB,GAAb,CAAkBN,GAAD,IAAS;AACtB,0BACI;AAAA,+BACI,QAAC,IAAD;AACI,UAAA,KAAK,EAAEV,KAAK,CAACY,GAAD,CAAL,CAAWF,GAAX,CADX;AAEI,UAAA,QAAQ,EAAE,IAAId,IAAJ,CAASgB,GAAT,EAAcF,GAAd;AAFd;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ;AAQH,KATD,CADH;AANL;AAAA;AAAA;AAAA;AAAA,UADJ;AAqBH,CApCD;;KAAMZ,I;AAsCN,eAAeA,IAAf","sourcesContent":["import React from 'react';\nimport {CELL_SIZE, range, Vec2, Obstacle} from '../utility';\nimport Cell from './Cell';\n\ntype GridProps = {position: Vec2; obstacles: Obstacle[]};\n\nconst Grid: React.FC<GridProps> = (props) => {\n    const table: string[][] = [];\n    for (let i = 0; i < 10; i++) {\n        table.push(new Array(10).fill('black'));\n    }\n    props.obstacles.forEach(function (element) {\n        if (element.side === 'top') {\n            for (let i = 0; i < element.height; i++) {\n                table[i][element.col] = 'green';\n            }\n        } else {\n            //bottom\n        }\n    });\n    table[props.position.row][props.position.col] = 'lime';\n    return (\n        <div\n            style={{\n                display: 'flex',\n                flexWrap: 'wrap',\n                width: CELL_SIZE * 10 + 'px'\n            }}>\n            {range(0, 10).map((row) =>\n                range(0, 10).map((col) => {\n                    return (\n                        <div>\n                            <Cell\n                                color={table[row][col]}\n                                position={new Vec2(row, col)}\n                            />\n                        </div>\n                    );\n                })\n            )}\n        </div>\n    );\n};\n\nexport default Grid;\n"]},"metadata":{},"sourceType":"module"}