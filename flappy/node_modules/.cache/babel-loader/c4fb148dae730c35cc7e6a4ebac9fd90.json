{"ast":null,"code":"var _jsxFileName = \"/Users/mik04rm/kody/flappy/src/components/Game.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useReducer } from 'react';\nimport { Vec2 } from '../utility';\nimport Grid from './Grid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst reducer = (state, action) => {\n  const newObstacles = state.obstacles.map(obstacle => {\n    obstacle.col -= 1;\n    return obstacle;\n  });\n\n  switch (action.type) {\n    case 'moveUp':\n      return {\n        position: new Vec2(state.position.row - 1, state.position.col),\n        obstacles: newObstacles\n      };\n\n    case 'moveDown':\n      return {\n        position: new Vec2(state.position.row + 1, state.position.col),\n        obstacles: newObstacles\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst Game = () => {\n  _s();\n\n  const initialObstacles = [{\n    col: 6,\n    height: 3,\n    side: 'bottom'\n  }, {\n    col: 8,\n    height: 4,\n    side: 'top'\n  }, {\n    col: 8,\n    height: 2,\n    side: 'bottom'\n  }];\n  const initialState = {\n    position: new Vec2(3, 3),\n    obstacles: initialObstacles\n  };\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const moveHandler = event => {\n    console.log('position');\n\n    if (event.key == 'ArrowUp') {\n      dispatch({\n        type: 'moveUp'\n      });\n    } else if (event.key == 'ArrowDown') {\n      dispatch({\n        type: 'moveDown'\n      });\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', moveHandler);\n    return () => document.removeEventListener('keydown', moveHandler);\n  });\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    position: state.position,\n    obstacles: state.obstacles\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Game, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/mik04rm/kody/flappy/src/components/Game.tsx"],"names":["React","useEffect","useReducer","Vec2","Grid","reducer","state","action","newObstacles","obstacles","map","obstacle","col","type","position","row","Game","initialObstacles","height","side","initialState","dispatch","moveHandler","event","console","log","key","document","addEventListener","removeEventListener"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,UAA1B,QAAqD,OAArD;AACA,SAAkBC,IAAlB,QAA6B,YAA7B;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAWA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAeC,MAAf,KAAyC;AACrD,QAAMC,YAAY,GAAGF,KAAK,CAACG,SAAN,CAAgBC,GAAhB,CAAqBC,QAAD,IAAc;AACnDA,IAAAA,QAAQ,CAACC,GAAT,IAAgB,CAAhB;AACA,WAAOD,QAAP;AACH,GAHoB,CAArB;;AAIA,UAAQJ,MAAM,CAACM,IAAf;AACI,SAAK,QAAL;AACI,aAAO;AACHC,QAAAA,QAAQ,EAAE,IAAIX,IAAJ,CAASG,KAAK,CAACQ,QAAN,CAAeC,GAAf,GAAqB,CAA9B,EAAiCT,KAAK,CAACQ,QAAN,CAAeF,GAAhD,CADP;AAEHH,QAAAA,SAAS,EAAED;AAFR,OAAP;;AAIJ,SAAK,UAAL;AACI,aAAO;AACHM,QAAAA,QAAQ,EAAE,IAAIX,IAAJ,CAASG,KAAK,CAACQ,QAAN,CAAeC,GAAf,GAAqB,CAA9B,EAAiCT,KAAK,CAACQ,QAAN,CAAeF,GAAhD,CADP;AAEHH,QAAAA,SAAS,EAAED;AAFR,OAAP;;AAIJ;AACI,aAAOF,KAAP;AAZR;AAcH,CAnBD;;AAqBA,MAAMU,IAAc,GAAG,MAAM;AAAA;;AACzB,QAAMC,gBAA4B,GAAG,CACjC;AAACL,IAAAA,GAAG,EAAE,CAAN;AAASM,IAAAA,MAAM,EAAE,CAAjB;AAAoBC,IAAAA,IAAI,EAAE;AAA1B,GADiC,EAEjC;AAACP,IAAAA,GAAG,EAAE,CAAN;AAASM,IAAAA,MAAM,EAAE,CAAjB;AAAoBC,IAAAA,IAAI,EAAE;AAA1B,GAFiC,EAGjC;AAACP,IAAAA,GAAG,EAAE,CAAN;AAASM,IAAAA,MAAM,EAAE,CAAjB;AAAoBC,IAAAA,IAAI,EAAE;AAA1B,GAHiC,CAArC;AAKA,QAAMC,YAAmB,GAAG;AACxBN,IAAAA,QAAQ,EAAE,IAAIX,IAAJ,CAAS,CAAT,EAAY,CAAZ,CADc;AAExBM,IAAAA,SAAS,EAAEQ;AAFa,GAA5B;AAIA,QAAM,CAACX,KAAD,EAAQe,QAAR,IAAoBnB,UAAU,CAACG,OAAD,EAAUe,YAAV,CAApC;;AACA,QAAME,WAAW,GAAIC,KAAD,IAA0B;AAC1CC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;;AACA,QAAIF,KAAK,CAACG,GAAN,IAAa,SAAjB,EAA4B;AACxBL,MAAAA,QAAQ,CAAC;AAACR,QAAAA,IAAI,EAAE;AAAP,OAAD,CAAR;AACH,KAFD,MAEO,IAAIU,KAAK,CAACG,GAAN,IAAa,WAAjB,EAA8B;AACjCL,MAAAA,QAAQ,CAAC;AAACR,QAAAA,IAAI,EAAE;AAAP,OAAD,CAAR;AACH;AACJ,GAPD;;AAQAZ,EAAAA,SAAS,CAAC,MAAM;AACZ0B,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAqCN,WAArC;AACA,WAAO,MAAMK,QAAQ,CAACE,mBAAT,CAA6B,SAA7B,EAAwCP,WAAxC,CAAb;AACH,GAHQ,CAAT;AAIA,sBAAO,QAAC,IAAD;AAAM,IAAA,QAAQ,EAAEhB,KAAK,CAACQ,QAAtB;AAAgC,IAAA,SAAS,EAAER,KAAK,CAACG;AAAjD;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CAxBD;;GAAMO,I;;KAAAA,I;AA0BN,eAAeA,IAAf","sourcesContent":["import React, {useEffect, useReducer, useState} from 'react';\nimport {Obstacle, Vec2} from '../utility';\nimport Grid from './Grid';\n\ntype State = {\n    position: Vec2;\n    obstacles: Obstacle[];\n};\n\ntype Action = {\n    type: 'moveUp' | 'moveDown';\n};\n\nconst reducer = (state: State, action: Action): State => {\n    const newObstacles = state.obstacles.map((obstacle) => {\n        obstacle.col -= 1;\n        return obstacle;\n    });\n    switch (action.type) {\n        case 'moveUp':\n            return {\n                position: new Vec2(state.position.row - 1, state.position.col),\n                obstacles: newObstacles\n            };\n        case 'moveDown':\n            return {\n                position: new Vec2(state.position.row + 1, state.position.col),\n                obstacles: newObstacles\n            };\n        default:\n            return state;\n    }\n};\n\nconst Game: React.FC = () => {\n    const initialObstacles: Obstacle[] = [\n        {col: 6, height: 3, side: 'bottom'},\n        {col: 8, height: 4, side: 'top'},\n        {col: 8, height: 2, side: 'bottom'}\n    ];\n    const initialState: State = {\n        position: new Vec2(3, 3),\n        obstacles: initialObstacles\n    };\n    const [state, dispatch] = useReducer(reducer, initialState);\n    const moveHandler = (event: KeyboardEvent) => {\n        console.log('position');\n        if (event.key == 'ArrowUp') {\n            dispatch({type: 'moveUp'});\n        } else if (event.key == 'ArrowDown') {\n            dispatch({type: 'moveDown'});\n        }\n    };\n    useEffect(() => {\n        document.addEventListener('keydown', moveHandler);\n        return () => document.removeEventListener('keydown', moveHandler);\n    });\n    return <Grid position={state.position} obstacles={state.obstacles} />;\n};\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}