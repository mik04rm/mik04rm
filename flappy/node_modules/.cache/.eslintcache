[{"/Users/mik04rm/kody/flappy/src/index.tsx":"1","/Users/mik04rm/kody/flappy/src/App.tsx":"2","/Users/mik04rm/kody/flappy/src/components/Game.tsx":"3","/Users/mik04rm/kody/flappy/src/components/Grid.tsx":"4","/Users/mik04rm/kody/flappy/src/utility.ts":"5","/Users/mik04rm/kody/flappy/src/components/Cell.tsx":"6"},{"size":207,"mtime":1625495904101,"results":"7","hashOfConfig":"8"},{"size":206,"mtime":1625181184158,"results":"9","hashOfConfig":"8"},{"size":1765,"mtime":1625503001922,"results":"10","hashOfConfig":"8"},{"size":1783,"mtime":1625503379773,"results":"11","hashOfConfig":"8"},{"size":501,"mtime":1625407547155,"results":"12","hashOfConfig":"8"},{"size":696,"mtime":1625420102040,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"m93ps5",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"/Users/mik04rm/kody/flappy/src/index.tsx",[],"/Users/mik04rm/kody/flappy/src/App.tsx",[],"/Users/mik04rm/kody/flappy/src/components/Game.tsx",["29"],"import React, {useEffect, useReducer, useState} from 'react';\nimport {Obstacle, Vec2} from '../utility';\nimport Grid from './Grid';\n\ntype State = {\n    position: Vec2;\n    obstacles: Obstacle[];\n};\n\ntype Action = {\n    type: 'moveUp' | 'moveDown';\n};\n\nconst reducer = (state: State, action: Action): State => {\n    const newObstacles = state.obstacles.map((obstacle) => {\n        obstacle.col -= 1;\n        return obstacle;\n    });\n    switch (action.type) {\n        case 'moveUp':\n            return {\n                position: new Vec2(state.position.row - 1, state.position.col),\n                obstacles: newObstacles\n            };\n        case 'moveDown':\n            return {\n                position: new Vec2(state.position.row + 1, state.position.col),\n                obstacles: newObstacles\n            };\n        default:\n            return state;\n    }\n};\n\nconst Game: React.FC = () => {\n    const initialObstacles: Obstacle[] = [\n        {col: 6, height: 3, side: 'bottom'},\n        {col: 8, height: 4, side: 'top'},\n        {col: 8, height: 2, side: 'bottom'}\n    ];\n\n    const initialState: State = {\n        position: new Vec2(3, 3),\n        obstacles: initialObstacles\n    };\n\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    const moveHandler = (event: KeyboardEvent) => {\n        if (event.key == 'ArrowUp') {\n            dispatch({type: 'moveUp'});\n        } else if (event.key == 'ArrowDown') {\n            dispatch({type: 'moveDown'});\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener('keydown', moveHandler);\n        return () => document.removeEventListener('keydown', moveHandler);\n    });\n\n    return <Grid position={state.position} obstacles={state.obstacles} />;\n};\n\nexport default Game;\n","/Users/mik04rm/kody/flappy/src/components/Grid.tsx",[],"/Users/mik04rm/kody/flappy/src/utility.ts",["30"],"export class Vec2 {\n    constructor(row: number, col: number) {\n        this.row = row;\n        this.col = col;\n    }\n\n    row: number;\n    col: number;\n\n    isEqual(other: Vec2): boolean {\n        return this.row == other.row && this.col == other.col;\n    }\n}\n\nexport const range = (start: number, end: number) =>\n    Array.from({length: end - start}, (v, k) => k + start);\n\nexport const CELL_SIZE = 30;\n\nexport interface Obstacle {\n    col: number;\n    height: number;\n    side: 'bottom' | 'top';\n}\n","/Users/mik04rm/kody/flappy/src/components/Cell.tsx",["31"],"import React from 'react';\nimport styled from 'styled-components';\nimport {Vec2, CELL_SIZE} from '../utility';\n\ntype CellProps = {\n    position: Vec2;\n    color: string;\n    // className?: string;\n};\n\n// const Wrapper = styled.div<CellProps>`\n//     border: 2px solid red;\n//     color: wheat;\n// `;\n\nconst Cell: React.FC<CellProps> = (props) => {\n    // return <Wrapper fill={props.fill} className={props.className} />;\n    //style = {};\n    return (\n        <div\n            style={{\n                backgroundColor: props.color,\n                width: CELL_SIZE + 'px',\n                height: CELL_SIZE + 'px'\n            }}>\n            {null}\n        </div>\n    );\n};\n\nexport default Cell;\n",{"ruleId":"32","severity":1,"message":"33","line":1,"column":39,"nodeType":"34","messageId":"35","endLine":1,"endColumn":47},{"ruleId":"36","severity":1,"message":"37","line":15,"column":22,"nodeType":"38","messageId":"39","endLine":15,"endColumn":53},{"ruleId":"32","severity":1,"message":"40","line":2,"column":8,"nodeType":"34","messageId":"35","endLine":2,"endColumn":14},"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","'styled' is defined but never used."]